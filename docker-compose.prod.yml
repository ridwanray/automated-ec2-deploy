version: '3.9'

services:
  api: &api
    build:
      context: .
      dockerfile: docker/prod/Dockerfile
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/django-api
    command: gunicorn -w 4 core.wsgi -b 0.0.0.0:8000 --timeout 420
    volumes:
      - ./app:/app
    ports:
      - '8000:8000'
    # env_file:
    #   - ./.env
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      SQL_ENGINE : ${SQL_ENGINE}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: ${REDIS_HOST}
      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_URL: ${REDIS_URL}
      FLOWER_BASIC_AUTH: ${FLOWER_BASIC_AUTH}
      APP_NAME: ${APP_NAME}
      SMTP_HOST: ${SMTP_HOST}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      SENDER_EMAIL: ${SENDER_EMAIL}
      RABBITMQ_URL: ${RABBITMQ_URL}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID}

    restart: unless-stopped

  celery:
    <<: *api
    command: celery -A core worker --loglevel=info 
    ports: []
    volumes:
      - ./app:/app
    # env_file:
    #   - ./.env
    depends_on:
      - api

  celery-beat:
    <<: *api
    command: celery -A core beat -l info
    ports: []
    volumes:
      - ./app:/app
    # env_file:
    #   - ./.env
    depends_on:
      - celery

  dashboard:
    <<: *api
    command: celery --broker=${RABBITMQ_URL} flower --port=5555
    ports:
      - '25559:5555'
    # env_file:
    #   - ./.env
    depends_on:
      - api
      - celery
